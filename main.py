import asyncio
import random
import logging
from datetime import datetime, timedelta
from telethon import TelegramClient
from config import API_ID, API_HASH, PHONE_NUMBER
import json
import math

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_sender.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class TelegramSender:
    def __init__(self, api_id, api_hash, phone_number):
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone_number = phone_number
        self.client = TelegramClient('session', api_id, api_hash)
    
    async def load_groups(self, filename='groups.txt'):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä—É–ø –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                groups = [line.strip() for line in file if line.strip()]
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(groups)} –≥—Ä—É–ø –∑ —Ñ–∞–π–ª—É {filename}")
            return groups
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return []
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≥—Ä—É–ø: {e}")
            return []
    
    def load_messages(self, filename='messages.txt'):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ñ–∞–π–ª—É"""
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                content = file.read()
                # –†–æ–∑–¥—ñ–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–∏–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫
                messages = [msg.strip() for msg in content.split('\n\n') if msg.strip()]
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(messages)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ñ–∞–π–ª—É {filename}")
            return messages
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return []
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
            return []
    
    def randomize_groups(self, groups):
        """–†–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è –ø–æ—Ä—è–¥–∫—É –≥—Ä—É–ø"""
        randomized_groups = groups.copy()  # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é, —â–æ–± –Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
        random.shuffle(randomized_groups)
        logger.info(f"üé≤ –ü–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø —Ä–∞–Ω–¥–æ–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É")
        return randomized_groups
    
    def get_random_delay(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏ –≤—ñ–¥ 5 –¥–æ 10 —Ö–≤–∏–ª–∏–Ω"""
        delay_minutes = random.randint(5, 10)
        delay_seconds = delay_minutes * 60
        logger.info(f"–ù–∞—Å—Ç—É–ø–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞: {delay_minutes} —Ö–≤–∏–ª–∏–Ω ({delay_seconds} —Å–µ–∫—É–Ω–¥)")
        return delay_seconds
    
    def extract_group_identifier(self, group_link):
        """–í–∏—Ç—è–≥—É—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
        if group_link.startswith('https://t.me/'):
            # –í–∏—Ç—è–≥—É—î–º–æ username –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            return group_link.replace('https://t.me/', '').split('?')[0]
        elif group_link.startswith('@'):
            # –Ø–∫—â–æ –≤–∂–µ —î username
            return group_link
        else:
            # –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞ –∞–±–æ username –±–µ–∑ @
            return group_link
    
    async def send_message_to_group(self, group_link, message, thread_id=1):
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –≥—Ä—É–ø—É"""
        try:
            # –í–∏—Ç—è–≥—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
            group_identifier = self.extract_group_identifier(group_link)
            
            # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ –≥—Ä—É–ø—É
            entity = await self.client.get_entity(group_identifier)
            await self.client.send_message(entity, message)
            logger.info(f"‚úÖ [–ü–æ—Ç–æ–∫ {thread_id}] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ –≥—Ä—É–ø—É: {group_link}")
            return True
        except Exception as e:
            logger.error(f"‚ùå [–ü–æ—Ç–æ–∫ {thread_id}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤ –≥—Ä—É–ø—É {group_link}: {e}")
            return False
    
    async def process_group_batch(self, groups_batch, messages, thread_id, total_groups):
        """–û–±—Ä–æ–±–∫–∞ –ø–∞–∫–µ—Ç—É –≥—Ä—É–ø –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        thread_successful = 0
        thread_failed = 0
        
        for i, group_link in enumerate(groups_batch, 1):
            # –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
            random_message = random.choice(messages)
            
            global_index = (thread_id - 1) * len(groups_batch) + i
            logger.info(f"[–ü–æ—Ç–æ–∫ {thread_id}] [{global_index}/{total_groups}] –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {group_link}")
            logger.info(f"[–ü–æ—Ç–æ–∫ {thread_id}] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {random_message[:50]}...")
            
            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            success = await self.send_message_to_group(group_link, random_message, thread_id)
            
            if success:
                thread_successful += 1
            else:
                thread_failed += 1
            
            # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –≤ –ø–æ—Ç–æ—Ü—ñ (–º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥–∏)
            if i < len(groups_batch):
                delay = random.randint(1, 3)  # 1-3 —Å–µ–∫—É–Ω–¥–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                logger.info(f"‚è≥ [–ü–æ—Ç–æ–∫ {thread_id}] –ó–∞—Ç—Ä–∏–º–∫–∞: {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
        
        logger.info(f"üßµ [–ü–æ—Ç–æ–∫ {thread_id}] –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ‚úÖ{thread_successful} ‚ùå{thread_failed}")
        return thread_successful, thread_failed
    
    def split_groups_into_batches(self, groups, num_threads):
        """–†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≥—Ä—É–ø –Ω–∞ –ø–∞–∫–µ—Ç–∏ –¥–ª—è –ø–æ—Ç–æ–∫—ñ–≤"""
        batch_size = math.ceil(len(groups) / num_threads)
        batches = []
        
        for i in range(0, len(groups), batch_size):
            batch = groups[i:i + batch_size]
            batches.append(batch)
        
        return batches
    
    async def start_mass_sending(self, cycles=1, num_threads=1):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞—Å–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ—Ç–æ–∫—ñ–≤"""
        try:
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
            await self.client.start(phone=self.phone_number)
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Telegram")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥—Ä—É–ø —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            original_groups = await self.load_groups()
            messages = self.load_messages()
            
            if not original_groups:
                logger.error("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø –ø–æ—Ä–æ–∂–Ω—ñ–π!")
                return
            
            if not messages:
                logger.error("–°–ø–∏—Å–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—ñ–π!")
                return
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
            infinite_mode = cycles == 999
            if infinite_mode:
                logger.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ –ë–ï–ó–ö–Ü–ù–ï–ß–ù–û–á —Ä–æ–∑—Å–∏–ª–∫–∏ –≤ {len(original_groups)} –≥—Ä—É–ø")
                logger.info(f"üßµ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤: {num_threads}")
                logger.info("‚ö†Ô∏è –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
            else:
                logger.info(f"üîÑ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Å–∏–ª–∫–∏ –≤ {len(original_groups)} –≥—Ä—É–ø, —Ü–∏–∫–ª—ñ–≤: {cycles}")
                logger.info(f"üßµ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤: {num_threads}")
            
            total_successful = 0
            total_failed = 0
            current_cycle = 0
            
            try:
                while True:
                    current_cycle += 1
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —Ü–∏–∫–ª—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É)
                    if not infinite_mode and current_cycle > cycles:
                        break
                    
                    # –†–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è –≥—Ä—É–ø –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª—É
                    randomized_groups = self.randomize_groups(original_groups)
                    
                    # –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ä–∞–Ω–¥–æ–º—ñ–∑–æ–≤–∞–Ω–∏—Ö –≥—Ä—É–ø –Ω–∞ –ø–∞–∫–µ—Ç–∏ –¥–ª—è –ø–æ—Ç–æ–∫—ñ–≤
                    group_batches = self.split_groups_into_batches(randomized_groups, num_threads)
                    actual_threads = len(group_batches)
                    
                    logger.info("="*60)
                    if infinite_mode:
                        logger.info(f"üîÑ –¶–ò–ö–õ {current_cycle} (–ë–ï–ó–ö–Ü–ù–ï–ß–ù–ò–ô –†–ï–ñ–ò–ú)")
                    else:
                        logger.info(f"üîÑ –¶–ò–ö–õ {current_cycle}/{cycles}")
                    logger.info(f"üßµ –ó–∞–ø—É—Å–∫ {actual_threads} –ø–æ—Ç–æ–∫—ñ–≤...")
                    logger.info(f"üé≤ –ì—Ä—É–±–∏ —Ä–∞–Ω–¥–æ–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ —Ü–∏–∫–ª—É")
                    logger.info("="*60)
                    
                    # –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
                    tasks = []
                    for thread_id, batch in enumerate(group_batches, 1):
                        task = self.process_group_batch(batch, messages, thread_id, len(randomized_groups))
                        tasks.append(task)
                    
                    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ç–æ–∫—ñ–≤
                    results = await asyncio.gather(*tasks)
                    
                    # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    cycle_successful = sum(result[0] for result in results)
                    cycle_failed = sum(result[1] for result in results)
                    
                    total_successful += cycle_successful
                    total_failed += cycle_failed
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª—É
                    logger.info("-"*50)
                    if infinite_mode:
                        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ò–ö–õ–£ {current_cycle} (–ë–ï–ó–ö–Ü–ù–ï–ß–ù–ò–ô):")
                    else:
                        logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ò–ö–õ–£ {current_cycle}/{cycles}:")
                    logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {cycle_successful}")
                    logger.info(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {cycle_failed}")
                    logger.info(f"üìù –í—Å—å–æ–≥–æ –≥—Ä—É–ø –≤ —Ü–∏–∫–ª—ñ: {len(randomized_groups)}")
                    logger.info(f"üßµ –ü–æ—Ç–æ–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {actual_threads}")
                    logger.info(f"üé≤ –ì—Ä—É–ø–∏ —Ä–∞–Ω–¥–æ–º—ñ–∑–æ–≤–∞–Ω–æ: –¢–ê–ö")
                    logger.info(f"üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ‚úÖ{total_successful} ‚ùå{total_failed}")
                    logger.info("-"*50)
                    
                    # –í–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ü–∏–∫–ª—É (5-10 —Ö–≤–∏–ª–∏–Ω)
                    # (–¥–ª—è –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –∑–∞–≤–∂–¥–∏, –¥–ª—è —Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–≥–æ - –æ–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
                    if infinite_mode or current_cycle < cycles:
                        delay = self.get_random_delay()
                        next_time = (datetime.now() + timedelta(seconds=delay)).strftime('%H:%M:%S %d.%m.%Y')
                        
                        if infinite_mode:
                            logger.info(f"üïê –ó–ê–¢–†–ò–ú–ö–ê –ú–Ü–ñ –¶–ò–ö–õ–ê–ú–ò: {delay//60} —Ö–≤–∏–ª–∏–Ω ({delay} —Å–µ–∫—É–Ω–¥)")
                            logger.info(f"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª {current_cycle + 1} –ø–æ—á–Ω–µ—Ç—å—Å—è –æ {next_time}")
                        else:
                            logger.info(f"üïê –ó–ê–¢–†–ò–ú–ö–ê –ú–Ü–ñ –¶–ò–ö–õ–ê–ú–ò: {delay//60} —Ö–≤–∏–ª–∏–Ω ({delay} —Å–µ–∫—É–Ω–¥)")
                            logger.info(f"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ü–∏–∫–ª {current_cycle + 1}/{cycles} –ø–æ—á–Ω–µ—Ç—å—Å—è –æ {next_time}")
                        
                        await asyncio.sleep(delay)
                        
            except KeyboardInterrupt:
                logger.info("\n" + "="*60)
                logger.info("‚ö†Ô∏è –û–¢–†–ò–ú–ê–ù–û –°–ò–ì–ù–ê–õ –ó–£–ü–ò–ù–ö–ò (Ctrl+C)")
                logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏...")
                logger.info("="*60)
            
            # –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—ñ—Ö —Ü–∏–∫–ª—ñ–≤
            logger.info("="*60)
            logger.info("üèÅ –ü–Ü–î–°–£–ú–ö–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            logger.info(f"‚úÖ –í—Å—å–æ–≥–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {total_successful}")
            logger.info(f"‚ùå –í—Å—å–æ–≥–æ –ø–æ–º–∏–ª–æ–∫: {total_failed}")
            logger.info(f"üîÑ –¶–∏–∫–ª—ñ–≤ –≤–∏–∫–æ–Ω–∞–Ω–æ: {current_cycle}")
            logger.info(f"üìù –ì—Ä—É–ø –≤ –∫–æ–∂–Ω–æ–º—É —Ü–∏–∫–ª—ñ: {len(original_groups)}")
            logger.info(f"üßµ –ü–æ—Ç–æ–∫—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {num_threads}")
            logger.info(f"üé≤ –†–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è –≥—Ä—É–ø: –£–í–Ü–ú–ö–ù–ï–ù–ê")
            logger.info(f"üìä –í—Å—å–æ–≥–æ —Å–ø—Ä–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {current_cycle * len(original_groups)}")
            if infinite_mode:
                logger.info("‚ôæÔ∏è –†–µ–∂–∏–º: –ë–ï–ó–ö–Ü–ù–ï–ß–ù–ò–ô (–∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º)")
            else:
                logger.info(f"üéØ –†–µ–∂–∏–º: –°–ö–Ü–ù–ß–ï–ù–ù–ò–ô ({cycles} —Ü–∏–∫–ª—ñ–≤)")
            logger.info("="*60)
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        finally:
            await self.client.disconnect()

def get_cycles_from_user():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ü–∏–∫–ª—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    while True:
        try:
            print("\n" + "="*50)
            print("üîÑ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¶–ò–ö–õ–Ü–í –†–û–ó–°–ò–õ–ö–ò")
            print("="*50)
            print("1Ô∏è‚É£  –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 998 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏–∫–ª—ñ–≤")
            print("‚ôæÔ∏è  –í–≤–µ–¥—ñ—Ç—å 999 - –¥–ª—è –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å 0 - –¥–ª—è –≤–∏—Ö–æ–¥—É")
            print("-"*50)
            
            user_input = input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü–∏–∫–ª—ñ–≤: ").strip()
            
            if not user_input:
                print("‚ùå –ü–æ—Ä–æ–∂–Ω—ñ–π –≤–≤—ñ–¥! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                continue
            
            cycles = int(user_input)
            
            if cycles == 0:
                print("üëã –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...")
                return None
            elif cycles == 999:
                print("‚ôæÔ∏è –û–±—Ä–∞–Ω–æ –ë–ï–ó–ö–Ü–ù–ï–ß–ù–ò–ô —Ä–µ–∂–∏–º —Ä–æ–∑—Å–∏–ª–∫–∏!")
                print("‚ö†Ô∏è –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Ctrl+C")
                confirm = input("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏? (y/n): ").strip().lower()
                if confirm in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                    return 999
                else:
                    continue
            elif 1 <= cycles <= 998:
                print(f"‚úÖ –û–±—Ä–∞–Ω–æ {cycles} —Ü–∏–∫–ª—ñ–≤ —Ä–æ–∑—Å–∏–ª–∫–∏")
                return cycles
            else:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 998, –∞–±–æ 999 –¥–ª—è –±–µ–∑–∫—ñ–Ω–µ—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏.")
                continue
                
        except ValueError:
            print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        except KeyboardInterrupt:
            print("\nüëã –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...")
            return None

def get_threads_from_user():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ç–æ–∫—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    while True:
        try:
            print("\n" + "="*50)
            print("üßµ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ö–Ü–õ–¨–ö–û–°–¢–Ü –ü–û–¢–û–ö–Ü–í")
            print("="*50)
            print("1Ô∏è‚É£  –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤")
            print("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è: 1-3 –ø–æ—Ç–æ–∫–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è")
            print("-"*50)
            
            user_input = input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1): ").strip()
            
            if not user_input:
                print("‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 1 –ø–æ—Ç–æ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º")
                return 1
            
            threads = int(user_input)
            
            if 1 <= threads <= 10:
                if threads > 3:
                    print("‚ö†Ô∏è –£–í–ê–ì–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—ñ–ª—å—à–µ 3 –ø–æ—Ç–æ–∫—ñ–≤ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è!")
                    confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ").strip().lower()
                    if confirm not in ['y', 'yes', '—Ç–∞–∫', '—Ç']:
                        continue
                print(f"‚úÖ –û–±—Ä–∞–Ω–æ {threads} –ø–æ—Ç–æ–∫—ñ–≤")
                return threads
            else:
                print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10.")
                continue
                
        except ValueError:
            print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        except KeyboardInterrupt:
            print("\nüëã –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏...")
            return None

async def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Telegram API –≤–∑—è—Ç–æ –∑ config.py
    # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ –¥–∞–Ω—ñ –º–æ–∂–Ω–∞ –Ω–∞ https://my.telegram.org/apps
    # –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    print(f"API_ID: {API_ID}")
    print(f"API_HASH: {API_HASH}")
    print(f"PHONE_NUMBER: {PHONE_NUMBER}")
    
    if API_ID == 'YOUR_API_ID' or API_HASH == 'YOUR_API_HASH':
        print("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –¥–∞–Ω—ñ API –≤ –∫–æ–¥—ñ!")
        print("–û—Ç—Ä–∏–º–∞—Ç–∏ —ó—Ö –º–æ–∂–Ω–∞ –Ω–∞ https://my.telegram.org/apps")
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ü–∏–∫–ª—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cycles = get_cycles_from_user()
    if cycles is None:
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ç–æ–∫—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    threads = get_threads_from_user()
    if threads is None:
        return
    
    print("\nüöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ Telegram Sender...")
    print("üé≤ –†–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—è –≥—Ä—É–ø –£–í–Ü–ú–ö–ù–ï–ù–ê - –∫–æ–∂–µ–Ω —Ü–∏–∫–ª –ø–æ—á–Ω–µ—Ç—å—Å—è –∑ —Ä—ñ–∑–Ω–∏—Ö –≥—Ä—É–ø!")
    sender = TelegramSender(API_ID, API_HASH, PHONE_NUMBER)
    await sender.start_mass_sending(cycles=cycles, num_threads=threads)

if __name__ == "__main__":
    asyncio.run(main())